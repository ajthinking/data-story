/**
 * @description: delete unnecessary files from the manifest.json.
 * @type {{opendir: {(path: PathLike, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void, (path: PathLike, options: OpenDirOptions, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void}, truncateSync(path: PathLike, len?: (number | null)): void, lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, fstatSync: {(fd: number, options?: (StatOptions & {bigint?: false | undefined})): Stats, (fd: number, options: (StatOptions & {bigint: true})): BigIntStats, (fd: number, options?: StatOptions): (Stats | BigIntStats)}, writev: {(fd: number, buffers: readonly NodeJS.ArrayBufferView[], cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: readonly NodeJS.ArrayBufferView[], position: number, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, openAsBlob(path: PathLike, options?: OpenAsBlobOptions): Promise<Blob>, fchmod: {(fd: number, mode: Mode, callback: NoParamCallback): void}, ObjectEncodingOptions: ObjectEncodingOptions, cpSync(source: (string | URL), destination: (string | URL), opts?: CopySyncOptions): void, renameSync(oldPath: PathLike, newPath: PathLike): void, statfs: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: ((StatFsOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: (StatFsOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStatsFs) => void): void, (path: PathLike, options: (StatFsOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (StatsFs | BigIntStatsFs)) => void): void}, Stats: Stats, readFile: {(path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void, (path: PathOrFileDescriptor, options: (({encoding: BufferEncoding, flag?: string | undefined} & Abortable) | BufferEncoding), callback: (err: (NodeJS.ErrnoException | null), data: string) => void): void, (path: PathOrFileDescriptor, options: ((ObjectEncodingOptions & {flag?: string | undefined} & Abortable) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: (string | Buffer)) => void): void, (path: PathOrFileDescriptor, callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void}, readSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)): number, (fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number}, EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "utf-16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>): FSWatcher, (filename: PathLike, options?: (WatchOptions | BufferEncoding | null), listener?: WatchListener<string>): FSWatcher, (filename: PathLike, options: (WatchOptions | string), listener?: WatchListener<string | Buffer>): FSWatcher, (filename: PathLike, listener?: WatchListener<string>): FSWatcher}, CopyOptions: CopyOptions, ReadVResult: ReadVResult, fdatasync: {(fd: number, callback: NoParamCallback): void}, fchown: {(fd: number, uid: number, gid: number, callback: NoParamCallback): void}, WatchEventType: "rename" | "change", writeFileSync(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions): void, chmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, lchmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, rmdirSync(path: PathLike, options?: RmDirOptions): void, closeSync(fd: number): void, open: {(path: PathLike, flags: (OpenMode | undefined), mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, flags: (OpenMode | undefined), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void}, rm: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmOptions, callback: NoParamCallback): void}, StatOptions: StatOptions, exists: {(path: PathLike, callback: (exists: boolean) => void): void}, readv: {(fd: number, buffers: readonly NodeJS.ArrayBufferView[], cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: readonly NodeJS.ArrayBufferView[], position: number, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, WatchOptions: WatchOptions, unwatchFile: {(filename: PathLike, listener?: StatsListener): void, (filename: PathLike, listener?: BigIntStatsListener): void}, Dir: Dir, fchownSync(fd: number, uid: number, gid: number): void, futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void, ReadSyncOptions: ReadSyncOptions, write: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, (fd: number, string: string, position: (number | undefined | null), encoding: (BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void}, readlinkSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, OpenDirOptions: OpenDirOptions, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, options: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null | undefined), callback: NoParamCallback): void, (path: PathLike, options: (Mode | MakeDirectoryOptions | null | undefined), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, callback: NoParamCallback): void}, writeSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)): number, (fd: number, string: string, position?: (number | null), encoding?: (BufferEncoding | null)): number}, symlink: {(target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback): void, (target: PathLike, path: PathLike, callback: NoParamCallback): void}, writeFile: {(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback): void, (path: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), callback: NoParamCallback): void}, fstat: {(fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (fd: number, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, truncate: {(path: PathLike, len: (number | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, access: {(path: PathLike, mode: (number | undefined), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, rmdir: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmDirOptions, callback: NoParamCallback): void}, lchown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, mkdtempSync: {(prefix: string, options?: EncodingOption): string, (prefix: string, options: BufferEncodingOption): Buffer, (prefix: string, options?: EncodingOption): (string | Buffer)}, readlink: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void}, lstatSync: StatSyncFn, StatWatcher: StatWatcher, WatchFileOptions: WatchFileOptions, unlink: {(path: PathLike, callback: NoParamCallback): void}, stat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, BufferEncodingOption: "buffer" | {encoding: "buffer"}, readvSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number, OpenMode: number | string, FSWatcher: FSWatcher, cp: {(source: (string | URL), destination: (string | URL), callback: (err: (NodeJS.ErrnoException | null)) => void): void, (source: (string | URL), destination: (string | URL), opts: CopyOptions, callback: (err: (NodeJS.ErrnoException | null)) => void): void}, copyFile: {(src: PathLike, dest: PathLike, callback: NoParamCallback): void, (src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void}, StatsBase: StatsBase, ReadPosition: number | bigint, WatchListener: (event: WatchEventType, filename: (T | null)) => void, realpathSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, ftruncate: {(fd: number, len: (number | undefined | null), callback: NoParamCallback): void, (fd: number, callback: NoParamCallback): void}, createWriteStream(path: PathLike, options?: (BufferEncoding | WriteStreamOptions)): WriteStream, realpath: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void}, watchFile: {(filename: PathLike, options: ((WatchFileOptions & {bigint?: false | undefined}) | undefined), listener: StatsListener): StatWatcher, (filename: PathLike, options: ((WatchFileOptions & {bigint: true}) | undefined), listener: BigIntStatsListener): StatWatcher, (filename: PathLike, listener: StatsListener): StatWatcher}, futimes: {(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, chmodSync(path: PathLike, mode: Mode): void, TimeLike: string | number | Date, existsSync(path: PathLike): boolean, promises: {opendir: {(path: PathLike, options?: OpenDirOptions): Promise<Dir>, (path: PathLike, options?: OpenDirOptions): Promise<Dir>}, ReadableWebStreamOptions: ReadableWebStreamOptions, FileReadOptions: FileReadOptions, FlagAndOpenMode: FlagAndOpenMode, readdir: {(path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>}, CreateReadStreamOptions: CreateReadStreamOptions, FileChangeInfo: FileChangeInfo, statfs: {(path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>, (path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>}, readFile: {(path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>, (path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>), (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>)}, appendFile: {(path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>, (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>}, lchmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, chmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, open: {(path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>, (path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>}, constants: {F_OK: number, R_OK: number, W_OK: number, X_OK: number, COPYFILE_EXCL: number, COPYFILE_FICLONE: number, COPYFILE_FICLONE_FORCE: number, O_RDONLY: number, O_WRONLY: number, O_RDWR: number, O_CREAT: number, O_EXCL: number, O_NOCTTY: number, O_TRUNC: number, O_APPEND: number, O_DIRECTORY: number, O_NOATIME: number, O_NOFOLLOW: number, O_SYNC: number, O_DSYNC: number, O_SYMLINK: number, O_DIRECT: number, O_NONBLOCK: number, S_IFMT: number, S_IFREG: number, S_IFDIR: number, S_IFCHR: number, S_IFBLK: number, S_IFIFO: number, S_IFLNK: number, S_IFSOCK: number, S_IRWXU: number, S_IRUSR: number, S_IWUSR: number, S_IXUSR: number, S_IRWXG: number, S_IRGRP: number, S_IWGRP: number, S_IXGRP: number, S_IRWXO: number, S_IROTH: number, S_IWOTH: number, S_IXOTH: number, UV_FS_O_FILEMAP: number}, rm: {(path: PathLike, options?: RmOptions): Promise<void>, (path: PathLike, options?: RmOptions): Promise<void>}, chown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, CreateWriteStreamOptions: CreateWriteStreamOptions, lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>, (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>}, symlink: {(target: PathLike, path: PathLike, type?: (string | null)): Promise<void>, (target: PathLike, path: PathLike, type?: (string | null)): Promise<void>}, FileHandle: FileHandle, writeFile: {(file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>, (file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>}, link: {(existingPath: PathLike, newPath: PathLike): Promise<void>, (existingPath: PathLike, newPath: PathLike): Promise<void>}, truncate: {(path: PathLike, len?: number): Promise<void>, (path: PathLike, len?: number): Promise<void>}, access: {(path: PathLike, mode?: number): Promise<void>, (path: PathLike, mode?: number): Promise<void>}, rmdir: {(path: PathLike, options?: RmDirOptions): Promise<void>, (path: PathLike, options?: RmDirOptions): Promise<void>}, lchown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, lstat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, readlink: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>}, FileReadResult: FileReadResult, unlink: {(path: PathLike): Promise<void>, (path: PathLike): Promise<void>}, stat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, mkdtemp: {(prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, cp: {(source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>, (source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>}, copyFile: {(src: PathLike, dest: PathLike, mode?: number): Promise<void>, (src: PathLike, dest: PathLike, mode?: number): Promise<void>}, rename: {(oldPath: PathLike, newPath: PathLike): Promise<void>, (oldPath: PathLike, newPath: PathLike): Promise<void>}, realpath: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}}, read: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, options: ReadAsyncOptions<TBuffer>, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, (fd: number, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void}, PathOrFileDescriptor: string | Buffer | URL | number, fsync: {(fd: number, callback: NoParamCallback): void}, fsyncSync(fd: number): void, statSync: StatSyncFn, RmOptions: RmOptions, chownSync(path: PathLike, uid: number, gid: number): void, readdir: {(path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), files: Buffer[]) => void): void, (path: PathLike, options: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: (string[] | Buffer[])) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined}), callback: (err: (NodeJS.ErrnoException | null), files: Dirent[]) => void): void}, Mode: number | string, accessSync(path: PathLike, mode?: number): void, mkdirSync: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): (string | undefined), (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): void, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): (string | undefined)}, PathLike: string | Buffer | URL, BigIntStatsFs: BigIntStatsFs, symlinkSync(target: PathLike, path: PathLike, type?: (symlink.Type | null)): void, copyFileSync(src: PathLike, dest: PathLike, mode?: number): void, lchmodSync(path: PathLike, mode: Mode): void, openSync(path: PathLike, flags: OpenMode, mode?: (Mode | null)): number, StatsFsBase: StatsFsBase, constants: constants, appendFile: {(path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback): void, (file: PathOrFileDescriptor, data: (string | Uint8Array), callback: NoParamCallback): void}, WriteFileOptions: (ObjectEncodingOptions & Abortable & {mode?: Mode | undefined, flag?: string | undefined}) | "ascii" | "utf8" | "utf-8" | "utf16le" | "utf-16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", RmDirOptions: RmDirOptions, MakeDirectoryOptions: MakeDirectoryOptions, chown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, rmSync(path: PathLike, options?: RmOptions): void, StatSyncOptions: StatSyncOptions, BigIntOptions: BigIntOptions, close: {(fd: number, callback?: NoParamCallback): void}, Dirent: Dirent, lchownSync(path: PathLike, uid: number, gid: number): void, appendFileSync(path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions): void, ftruncateSync(fd: number, len?: (number | null)): void, link: {(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, ReadStream: ReadStream, readFileSync: {(path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)): Buffer, (path: PathOrFileDescriptor, options: ({encoding: BufferEncoding, flag?: string | undefined} | BufferEncoding)): string, (path: PathOrFileDescriptor, options?: ((ObjectEncodingOptions & {flag?: string | undefined}) | BufferEncoding | null)): (string | Buffer)}, linkSync(existingPath: PathLike, newPath: PathLike): void, OpenAsBlobOptions: OpenAsBlobOptions, lstat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, writevSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number, utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, fdatasyncSync(fd: number): void, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, ReadAsyncOptions: ReadAsyncOptions, readdirSync: {(path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | null)): string[], (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Buffer[], (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): (string[] | Buffer[]), (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Dirent[]}, mkdtemp: {(prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void, (prefix: string, options: ("buffer" | {encoding: "buffer"}), callback: (err: (NodeJS.ErrnoException | null), folder: Buffer) => void): void, (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: (string | Buffer)) => void): void, (prefix: string, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, createReadStream(path: PathLike, options?: (BufferEncoding | ReadStreamOptions)): ReadStream, StatSyncFn: StatSyncFn, WriteVResult: WriteVResult, unlinkSync(path: PathLike): void, statfsSync: {(path: PathLike, options?: (StatFsOptions & {bigint?: false | undefined})): StatsFs, (path: PathLike, options: (StatFsOptions & {bigint: true})): BigIntStatsFs, (path: PathLike, options?: StatFsOptions): (StatsFs | BigIntStatsFs)}, BigIntStats: BigIntStats, StatsFs: StatsFs, opendirSync(path: PathLike, options?: OpenDirOptions): Dir, StatsListener: (curr: Stats, prev: Stats) => void, CopySyncOptions: CopySyncOptions, rename: {(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, WriteStream: WriteStream, StatFsOptions: StatFsOptions, fchmodSync(fd: number, mode: Mode): void, BigIntStatsListener: (curr: BigIntStats, prev: BigIntStats) => void} | {opendir: {(path: PathLike, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void, (path: PathLike, options: OpenDirOptions, cb: (err: (NodeJS.ErrnoException | null), dir: Dir) => void): void}, truncateSync(path: PathLike, len?: (number | null)): void, lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, fstatSync: {(fd: number, options?: (StatOptions & {bigint?: false | undefined})): Stats, (fd: number, options: (StatOptions & {bigint: true})): BigIntStats, (fd: number, options?: StatOptions): (Stats | BigIntStats)}, writev: {(fd: number, buffers: readonly NodeJS.ArrayBufferView[], cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: readonly NodeJS.ArrayBufferView[], position: number, cb: (err: (NodeJS.ErrnoException | null), bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, openAsBlob(path: PathLike, options?: OpenAsBlobOptions): Promise<Blob>, fchmod: {(fd: number, mode: Mode, callback: NoParamCallback): void}, ObjectEncodingOptions: ObjectEncodingOptions, cpSync(source: (string | URL), destination: (string | URL), opts?: CopySyncOptions): void, renameSync(oldPath: PathLike, newPath: PathLike): void, statfs: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: ((StatFsOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: StatsFs) => void): void, (path: PathLike, options: (StatFsOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStatsFs) => void): void, (path: PathLike, options: (StatFsOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (StatsFs | BigIntStatsFs)) => void): void}, Stats: Stats, readFile: {(path: PathOrFileDescriptor, options: (({encoding?: null | undefined, flag?: string | undefined} & Abortable) | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void, (path: PathOrFileDescriptor, options: (({encoding: BufferEncoding, flag?: string | undefined} & Abortable) | BufferEncoding), callback: (err: (NodeJS.ErrnoException | null), data: string) => void): void, (path: PathOrFileDescriptor, options: ((ObjectEncodingOptions & {flag?: string | undefined} & Abortable) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), data: (string | Buffer)) => void): void, (path: PathOrFileDescriptor, callback: (err: (NodeJS.ErrnoException | null), data: Buffer) => void): void}, readSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset: number, length: number, position: (ReadPosition | null)): number, (fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number}, EncodingOption: ObjectEncodingOptions | "ascii" | "utf8" | "utf-8" | "utf16le" | "utf-16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer"), listener?: WatchListener<Buffer>): FSWatcher, (filename: PathLike, options?: (WatchOptions | BufferEncoding | null), listener?: WatchListener<string>): FSWatcher, (filename: PathLike, options: (WatchOptions | string), listener?: WatchListener<string | Buffer>): FSWatcher, (filename: PathLike, listener?: WatchListener<string>): FSWatcher}, CopyOptions: CopyOptions, ReadVResult: ReadVResult, fdatasync: {(fd: number, callback: NoParamCallback): void}, fchown: {(fd: number, uid: number, gid: number, callback: NoParamCallback): void}, WatchEventType: "rename" | "change", writeFileSync(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options?: WriteFileOptions): void, chmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, lchmod: {(path: PathLike, mode: Mode, callback: NoParamCallback): void}, rmdirSync(path: PathLike, options?: RmDirOptions): void, closeSync(fd: number): void, open: {(path: PathLike, flags: (OpenMode | undefined), mode: (Mode | undefined | null), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, flags: (OpenMode | undefined), callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), fd: number) => void): void}, rm: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmOptions, callback: NoParamCallback): void}, StatOptions: StatOptions, exists: {(path: PathLike, callback: (exists: boolean) => void): void}, readv: {(fd: number, buffers: readonly NodeJS.ArrayBufferView[], cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void, (fd: number, buffers: readonly NodeJS.ArrayBufferView[], position: number, cb: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void): void}, WatchOptions: WatchOptions, unwatchFile: {(filename: PathLike, listener?: StatsListener): void, (filename: PathLike, listener?: BigIntStatsListener): void}, Dir: Dir, fchownSync(fd: number, uid: number, gid: number): void, futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void, ReadSyncOptions: ReadSyncOptions, write: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), length: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, callback: (err: (NodeJS.ErrnoException | null), written: number, buffer: TBuffer) => void): void, (fd: number, string: string, position: (number | undefined | null), encoding: (BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, position: (number | undefined | null), callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void, (fd: number, string: string, callback: (err: (NodeJS.ErrnoException | null), written: number, str: string) => void): void}, readlinkSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, OpenDirOptions: OpenDirOptions, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true}), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, options: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null | undefined), callback: NoParamCallback): void, (path: PathLike, options: (Mode | MakeDirectoryOptions | null | undefined), callback: (err: (NodeJS.ErrnoException | null), path?: string) => void): void, (path: PathLike, callback: NoParamCallback): void}, writeSync: {(fd: number, buffer: NodeJS.ArrayBufferView, offset?: (number | null), length?: (number | null), position?: (number | null)): number, (fd: number, string: string, position?: (number | null), encoding?: (BufferEncoding | null)): number}, symlink: {(target: PathLike, path: PathLike, type: (symlink.Type | undefined | null), callback: NoParamCallback): void, (target: PathLike, path: PathLike, callback: NoParamCallback): void}, writeFile: {(file: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), options: WriteFileOptions, callback: NoParamCallback): void, (path: PathOrFileDescriptor, data: (string | NodeJS.ArrayBufferView), callback: NoParamCallback): void}, fstat: {(fd: number, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (fd: number, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (fd: number, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, truncate: {(path: PathLike, len: (number | undefined | null), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, access: {(path: PathLike, mode: (number | undefined), callback: NoParamCallback): void, (path: PathLike, callback: NoParamCallback): void}, rmdir: {(path: PathLike, callback: NoParamCallback): void, (path: PathLike, options: RmDirOptions, callback: NoParamCallback): void}, lchown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, mkdtempSync: {(prefix: string, options?: EncodingOption): string, (prefix: string, options: BufferEncodingOption): Buffer, (prefix: string, options?: EncodingOption): (string | Buffer)}, readlink: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), linkString: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), linkString: string) => void): void}, lstatSync: StatSyncFn, StatWatcher: StatWatcher, WatchFileOptions: WatchFileOptions, unlink: {(path: PathLike, callback: NoParamCallback): void}, stat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, BufferEncodingOption: "buffer" | {encoding: "buffer"}, readvSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number, OpenMode: number | string, FSWatcher: FSWatcher, cp: {(source: (string | URL), destination: (string | URL), callback: (err: (NodeJS.ErrnoException | null)) => void): void, (source: (string | URL), destination: (string | URL), opts: CopyOptions, callback: (err: (NodeJS.ErrnoException | null)) => void): void}, copyFile: {(src: PathLike, dest: PathLike, callback: NoParamCallback): void, (src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void}, StatsBase: StatsBase, ReadPosition: number | bigint, WatchListener: (event: WatchEventType, filename: (T | null)) => void, realpathSync: {(path: PathLike, options?: EncodingOption): string, (path: PathLike, options: BufferEncodingOption): Buffer, (path: PathLike, options?: EncodingOption): (string | Buffer)}, ftruncate: {(fd: number, len: (number | undefined | null), callback: NoParamCallback): void, (fd: number, callback: NoParamCallback): void}, createWriteStream(path: PathLike, options?: (BufferEncoding | WriteStreamOptions)): WriteStream, realpath: {(path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void, (path: PathLike, options: BufferEncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: Buffer) => void): void, (path: PathLike, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: (string | Buffer)) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), resolvedPath: string) => void): void}, watchFile: {(filename: PathLike, options: ((WatchFileOptions & {bigint?: false | undefined}) | undefined), listener: StatsListener): StatWatcher, (filename: PathLike, options: ((WatchFileOptions & {bigint: true}) | undefined), listener: BigIntStatsListener): StatWatcher, (filename: PathLike, listener: StatsListener): StatWatcher}, futimes: {(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, chmodSync(path: PathLike, mode: Mode): void, TimeLike: string | number | Date, existsSync(path: PathLike): boolean, promises: {opendir: {(path: PathLike, options?: OpenDirOptions): Promise<Dir>, (path: PathLike, options?: OpenDirOptions): Promise<Dir>}, ReadableWebStreamOptions: ReadableWebStreamOptions, FileReadOptions: FileReadOptions, FlagAndOpenMode: FlagAndOpenMode, readdir: {(path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[]>, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Promise<Buffer[]>, (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): Promise<string[] | Buffer[]>, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Promise<Dirent[]>}, CreateReadStreamOptions: CreateReadStreamOptions, FileChangeInfo: FileChangeInfo, statfs: {(path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>, (path: PathLike, opts?: (StatFsOptions & {bigint?: false | undefined})): Promise<StatsFs>, (path: PathLike, opts: (StatFsOptions & {bigint: true})): Promise<BigIntStatsFs>, (path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>}, readFile: {(path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>, (path: (PathLike | FileHandle), options?: (({encoding?: null | undefined, flag?: OpenMode | undefined} & Abortable) | null)): Promise<Buffer>, (path: (PathLike | FileHandle), options: (({encoding: BufferEncoding, flag?: OpenMode | undefined} & Abortable) | BufferEncoding)): Promise<string>, (path: (PathLike | FileHandle), options?: ((ObjectEncodingOptions & Abortable & {flag?: OpenMode | undefined}) | BufferEncoding | null)): Promise<string | Buffer>}, watch: {(filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>), (filename: PathLike, options: ((WatchOptions & {encoding: "buffer"}) | "buffer")): AsyncIterable<FileChangeInfo<Buffer>>, (filename: PathLike, options?: (WatchOptions | BufferEncoding)): AsyncIterable<FileChangeInfo<string>>, (filename: PathLike, options: (WatchOptions | string)): (AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>)}, appendFile: {(path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>, (path: (PathLike | FileHandle), data: (string | Uint8Array), options?: ((ObjectEncodingOptions & FlagAndOpenMode) | BufferEncoding | null)): Promise<void>}, lchmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, chmod: {(path: PathLike, mode: Mode): Promise<void>, (path: PathLike, mode: Mode): Promise<void>}, open: {(path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>, (path: PathLike, flags?: (string | number), mode?: Mode): Promise<FileHandle>}, constants: {F_OK: number, R_OK: number, W_OK: number, X_OK: number, COPYFILE_EXCL: number, COPYFILE_FICLONE: number, COPYFILE_FICLONE_FORCE: number, O_RDONLY: number, O_WRONLY: number, O_RDWR: number, O_CREAT: number, O_EXCL: number, O_NOCTTY: number, O_TRUNC: number, O_APPEND: number, O_DIRECTORY: number, O_NOATIME: number, O_NOFOLLOW: number, O_SYNC: number, O_DSYNC: number, O_SYMLINK: number, O_DIRECT: number, O_NONBLOCK: number, S_IFMT: number, S_IFREG: number, S_IFDIR: number, S_IFCHR: number, S_IFBLK: number, S_IFIFO: number, S_IFLNK: number, S_IFSOCK: number, S_IRWXU: number, S_IRUSR: number, S_IWUSR: number, S_IXUSR: number, S_IRWXG: number, S_IRGRP: number, S_IWGRP: number, S_IXGRP: number, S_IRWXO: number, S_IROTH: number, S_IWOTH: number, S_IXOTH: number, UV_FS_O_FILEMAP: number}, rm: {(path: PathLike, options?: RmOptions): Promise<void>, (path: PathLike, options?: RmOptions): Promise<void>}, chown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, CreateWriteStreamOptions: CreateWriteStreamOptions, lutimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, mkdir: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>, (path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): Promise<string | undefined>, (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): Promise<void>, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): Promise<string | undefined>}, symlink: {(target: PathLike, path: PathLike, type?: (string | null)): Promise<void>, (target: PathLike, path: PathLike, type?: (string | null)): Promise<void>}, FileHandle: FileHandle, writeFile: {(file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>, (file: (PathLike | FileHandle), data: (string | NodeJS.ArrayBufferView | Iterable<string | NodeJS.ArrayBufferView> | AsyncIterable<string | NodeJS.ArrayBufferView> | Stream), options?: ((ObjectEncodingOptions & {mode?: Mode | undefined, flag?: OpenMode | undefined} & Abortable) | BufferEncoding | null)): Promise<void>}, link: {(existingPath: PathLike, newPath: PathLike): Promise<void>, (existingPath: PathLike, newPath: PathLike): Promise<void>}, truncate: {(path: PathLike, len?: number): Promise<void>, (path: PathLike, len?: number): Promise<void>}, access: {(path: PathLike, mode?: number): Promise<void>, (path: PathLike, mode?: number): Promise<void>}, rmdir: {(path: PathLike, options?: RmDirOptions): Promise<void>, (path: PathLike, options?: RmDirOptions): Promise<void>}, lchown: {(path: PathLike, uid: number, gid: number): Promise<void>, (path: PathLike, uid: number, gid: number): Promise<void>}, lstat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, readlink: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | string | null)): Promise<string | Buffer>}, FileReadResult: FileReadResult, unlink: {(path: PathLike): Promise<void>, (path: PathLike): Promise<void>}, stat: {(path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>, (path: PathLike, opts?: (StatOptions & {bigint?: false | undefined})): Promise<Stats>, (path: PathLike, opts: (StatOptions & {bigint: true})): Promise<BigIntStats>, (path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>}, mkdtemp: {(prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (prefix: string, options: BufferEncodingOption): Promise<Buffer>, (prefix: string, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>, (path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>}, cp: {(source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>, (source: (string | URL), destination: (string | URL), opts?: CopyOptions): Promise<void>}, copyFile: {(src: PathLike, dest: PathLike, mode?: number): Promise<void>, (src: PathLike, dest: PathLike, mode?: number): Promise<void>}, rename: {(oldPath: PathLike, newPath: PathLike): Promise<void>, (oldPath: PathLike, newPath: PathLike): Promise<void>}, realpath: {(path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string>, (path: PathLike, options: BufferEncodingOption): Promise<Buffer>, (path: PathLike, options?: (ObjectEncodingOptions | BufferEncoding | null)): Promise<string | Buffer>}}, read: {<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: (ReadPosition | null), callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, <TBuffer extends NodeJS.ArrayBufferView>(fd: number, options: ReadAsyncOptions<TBuffer>, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: TBuffer) => void): void, (fd: number, callback: (err: (NodeJS.ErrnoException | null), bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void}, PathOrFileDescriptor: string | Buffer | URL | number, fsync: {(fd: number, callback: NoParamCallback): void}, fsyncSync(fd: number): void, statSync: StatSyncFn, RmOptions: RmOptions, chownSync(path: PathLike, uid: number, gid: number): void, readdir: {(path: PathLike, options: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer"), callback: (err: (NodeJS.ErrnoException | null), files: Buffer[]) => void): void, (path: PathLike, options: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | undefined | null), callback: (err: (NodeJS.ErrnoException | null), files: (string[] | Buffer[])) => void): void, (path: PathLike, callback: (err: (NodeJS.ErrnoException | null), files: string[]) => void): void, (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined}), callback: (err: (NodeJS.ErrnoException | null), files: Dirent[]) => void): void}, Mode: number | string, accessSync(path: PathLike, mode?: number): void, mkdirSync: {(path: PathLike, options: (MakeDirectoryOptions & {recursive: true})): (string | undefined), (path: PathLike, options?: (Mode | (MakeDirectoryOptions & {recursive?: false | undefined}) | null)): void, (path: PathLike, options?: (Mode | MakeDirectoryOptions | null)): (string | undefined)}, PathLike: string | Buffer | URL, BigIntStatsFs: BigIntStatsFs, symlinkSync(target: PathLike, path: PathLike, type?: (symlink.Type | null)): void, copyFileSync(src: PathLike, dest: PathLike, mode?: number): void, lchmodSync(path: PathLike, mode: Mode): void, openSync(path: PathLike, flags: OpenMode, mode?: (Mode | null)): number, StatsFsBase: StatsFsBase, constants: constants, appendFile: {(path: PathOrFileDescriptor, data: (string | Uint8Array), options: WriteFileOptions, callback: NoParamCallback): void, (file: PathOrFileDescriptor, data: (string | Uint8Array), callback: NoParamCallback): void}, WriteFileOptions: (ObjectEncodingOptions & Abortable & {mode?: Mode | undefined, flag?: string | undefined}) | "ascii" | "utf8" | "utf-8" | "utf16le" | "utf-16le" | "ucs2" | "ucs-2" | "base64" | "base64url" | "latin1" | "binary" | "hex", RmDirOptions: RmDirOptions, MakeDirectoryOptions: MakeDirectoryOptions, chown: {(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void}, rmSync(path: PathLike, options?: RmOptions): void, StatSyncOptions: StatSyncOptions, BigIntOptions: BigIntOptions, close: {(fd: number, callback?: NoParamCallback): void}, Dirent: Dirent, lchownSync(path: PathLike, uid: number, gid: number): void, appendFileSync(path: PathOrFileDescriptor, data: (string | Uint8Array), options?: WriteFileOptions): void, ftruncateSync(fd: number, len?: (number | null)): void, link: {(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, ReadStream: ReadStream, readFileSync: {(path: PathOrFileDescriptor, options?: ({encoding?: null | undefined, flag?: string | undefined} | null)): Buffer, (path: PathOrFileDescriptor, options: ({encoding: BufferEncoding, flag?: string | undefined} | BufferEncoding)): string, (path: PathOrFileDescriptor, options?: ((ObjectEncodingOptions & {flag?: string | undefined}) | BufferEncoding | null)): (string | Buffer)}, linkSync(existingPath: PathLike, newPath: PathLike): void, OpenAsBlobOptions: OpenAsBlobOptions, lstat: {(path: PathLike, callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: ((StatOptions & {bigint?: false | undefined}) | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: Stats) => void): void, (path: PathLike, options: (StatOptions & {bigint: true}), callback: (err: (NodeJS.ErrnoException | null), stats: BigIntStats) => void): void, (path: PathLike, options: (StatOptions | undefined), callback: (err: (NodeJS.ErrnoException | null), stats: (Stats | BigIntStats)) => void): void}, writevSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number, utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void, fdatasyncSync(fd: number): void, NoParamCallback: (err: (NodeJS.ErrnoException | null)) => void, ReadAsyncOptions: ReadAsyncOptions, readdirSync: {(path: PathLike, options?: ({encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined} | BufferEncoding | null)): string[], (path: PathLike, options: ({encoding: "buffer", withFileTypes?: false | undefined, recursive?: boolean | undefined} | "buffer")): Buffer[], (path: PathLike, options?: ((ObjectEncodingOptions & {withFileTypes?: false | undefined, recursive?: boolean | undefined}) | BufferEncoding | null)): (string[] | Buffer[]), (path: PathLike, options: (ObjectEncodingOptions & {withFileTypes: true, recursive?: boolean | undefined})): Dirent[]}, mkdtemp: {(prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void, (prefix: string, options: ("buffer" | {encoding: "buffer"}), callback: (err: (NodeJS.ErrnoException | null), folder: Buffer) => void): void, (prefix: string, options: EncodingOption, callback: (err: (NodeJS.ErrnoException | null), folder: (string | Buffer)) => void): void, (prefix: string, callback: (err: (NodeJS.ErrnoException | null), folder: string) => void): void}, utimes: {(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void}, createReadStream(path: PathLike, options?: (BufferEncoding | ReadStreamOptions)): ReadStream, StatSyncFn: StatSyncFn, WriteVResult: WriteVResult, unlinkSync(path: PathLike): void, statfsSync: {(path: PathLike, options?: (StatFsOptions & {bigint?: false | undefined})): StatsFs, (path: PathLike, options: (StatFsOptions & {bigint: true})): BigIntStatsFs, (path: PathLike, options?: StatFsOptions): (StatsFs | BigIntStatsFs)}, BigIntStats: BigIntStats, StatsFs: StatsFs, opendirSync(path: PathLike, options?: OpenDirOptions): Dir, StatsListener: (curr: Stats, prev: Stats) => void, CopySyncOptions: CopySyncOptions, rename: {(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void}, WriteStream: WriteStream, StatFsOptions: StatFsOptions, fchmodSync(fd: number, mode: Mode): void, BigIntStatsListener: (curr: BigIntStats, prev: BigIntStats) => void}}
 */
const fs = require('fs');
const path = require('path');

const manifestConfig = require('./manifest.json');

const keepFiles = new Set(manifestConfig.icons.map(icon => path.join(__dirname, icon.src)));

const directoriesToClean = ['ios', 'windows11', 'android'];

directoriesToClean.forEach(dir => {
  const fullPath = path.join(__dirname, dir);
  fs.readdir(fullPath, (err, files) => {
    if (err) {
      console.error(`Error reading directory ${fullPath}:`, err);
      return;
    }

    files.forEach(file => {
      const filePath = path.join(fullPath, file);
      if (!keepFiles.has(filePath)) {
        fs.unlink(filePath, err => {
          if (err) {
            console.error(`Error deleting file ${filePath}:`, err);
          } else {
            console.log(`Deleted file ${filePath}`);
          }
        });
      }
    });
  });
});
