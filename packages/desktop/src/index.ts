/**
 * index.ts: Mainly responsible for createWindows and handling electron lifecycle events,
 * like app.on('ready').
 */
import { app, BrowserWindow } from 'electron';
import { DefaultWorkspace, Workspace } from './main/workspace';
import { initDataStoryServer } from './main/initDataStoryServer';
import { registerIpcHandlers } from './main/ipcHandle';
import { DataStoryWindowContext } from './types';
import path from 'path';
import * as os from 'os';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): DataStoryWindowContext => {
  let mainWindow: BrowserWindow;

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1600,
    width: 1800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Modify the Content Security Policy
  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          'default-src \'self\' \'unsafe-inline\' data:; ' +
          'script-src \'self\' \'unsafe-eval\' \'unsafe-inline\' ws://localhost:3100; ' +
          'connect-src \'self\' ws://localhost:3100'
        ]
      }
    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  const mainWindowActions = {
    setTitle: (title: string) => mainWindow.setTitle(title),
    webContentsSend: (channel: string, data: any) => mainWindow.webContents.send(channel, data),
  }

  /**
   * Designed for easy expansion and to maintain logical consistency:
   * 1. Double-click the `data-story` icon to launch the desktop app
   * 2.Opening the desktop app via the context menu (still under development)
   */
  const workspace = new DefaultWorkspace();
  workspace.openDiagram(mainWindowActions, '');

  return {
    mainWindowActions,
    workspace
  };
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  const { mainWindowActions, workspace } = createWindow();

  registerIpcHandlers({ mainWindowActions, workspace });
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
});

initDataStoryServer();
