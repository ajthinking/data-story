/**
 * index.ts: Mainly responsible for createWindows and handling electron lifecycle events,
 * like app.on('ready').
 */
import { app, BrowserWindow } from 'electron';
import { DefaultWorkspace, Workspace } from './main/workspace';
import { initDataStoryServer } from './main/initDataStoryServer';
import { registerIpcHandlers } from './main/ipcHandle';
import { MainWindowActions } from './types';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

class DataStoryWindow {
  private mainWindow: BrowserWindow;
  private workspace: Workspace; // 假设Workspace是已经定义好的类

  constructor() {
    this.createWindow();
  }

  public switchWorkspace(filePath: string): void {
    // Assuming Workspace is a defined class that takes a filePath in its constructor
    this.workspace = new Workspace(filePath);
    this.workspace.initSettingsAndEnv(this.getMainWindowActions());
  }

  public getMainWindowActions(): MainWindowActions {
    return {
      setTitle: (title) => this.mainWindow.setTitle(title),
      webContentsSend: (channel, data) => this.mainWindow.webContents.send(channel, data),
    };
  }

  public getWorkspace(): Workspace {
    return this.workspace;
  }

  private createWindow(): void {
    // Create the browser window.
    this.mainWindow = new BrowserWindow({
      height: 1600,
      width: 1800,
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // 确保这个变量在类的上下文中是可访问的
      },
    });

    // Modify the Content Security Policy
    this.mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          'Content-Security-Policy': [
            'default-src \'self\' \'unsafe-inline\' data:; ' +
            'script-src \'self\' \'unsafe-eval\' \'unsafe-inline\' ws://localhost:3100; ' +
            'connect-src \'self\' ws://localhost:3100',
          ],
        },
      });
    });

    // Load the index.html of the app.
    this.mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    // Open the DevTools.
    this.mainWindow.webContents.openDevTools();

    // Initialize workspace with mainWindow actions
    this.initWorkspace();
  }

  private initWorkspace(): void {
    const mainWindowActions = this.getMainWindowActions()

    // Assuming DefaultWorkspace is a defined class
    this.workspace = new DefaultWorkspace();
    this.workspace.initSettingsAndEnv(mainWindowActions);
  }
}

function startDesktopWindow(): void {
  const dataStoryWindow = new DataStoryWindow();

  registerIpcHandlers({
    getMainWindowActions: () => dataStoryWindow.getMainWindowActions(),
    getWorkspace:() => dataStoryWindow.getWorkspace(),
    switchWorkspace:(filePath: string) => dataStoryWindow.switchWorkspace(filePath)
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready', () => {
  startDesktopWindow();
});

// On OS X it's common to re-create a window in the app when the
// dock icon is clicked and there are no other windows open.
app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    startDesktopWindow();
  }
});

initDataStoryServer();
